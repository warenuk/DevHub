1	import 'package:devhub_gpt/features/notes/data/datasources/local/hive_notes_local_data_source.dart';
2	import 'package:devhub_gpt/features/notes/data/repositories/notes_repository_hive.dart';
3	import 'dart:io';
4	
5	import 'package:flutter_test/flutter_test.dart';
6	import 'package:hive/hive.dart';
7	
8	void main() {
9	  late Directory tempDir;
10	  setUpAll(() async {
11	    TestWidgetsFlutterBinding.ensureInitialized();
12	    tempDir = await Directory.systemTemp.createTemp('hive_notes_test');
13	    Hive.init(tempDir.path);
14	  });
15	
16	  tearDown(() async {
17	    if (Hive.isBoxOpen('notes_box_test')) {
18	      final box = Hive.box<String>('notes_box_test');
19	      await box.clear();
20	      await box.close();
21	      await box.deleteFromDisk();
22	    }
23	    if (await tempDir.exists()) {
24	      await tempDir.delete(recursive: true);
25	    }
26	  });
27	
28	  test('HiveNotesRepository CRUD and sorting', () async {
29	    final box = await Hive.openBox<String>('notes_box_test');
30	    final repo = HiveNotesRepository(HiveNotesLocalDataSource(box));
31	
32	    // Initially empty
33	    expect(await repo.listNotes(), isEmpty);
34	
35	    // Create
36	    final a = await repo.createNote(title: 'A', content: 'a');
37	    await Future<void>.delayed(const Duration(milliseconds: 5));
38	    final b = await repo.createNote(title: 'B', content: 'b');
39	
40	    // List
41	    final list1 = await repo.listNotes();
42	    expect(list1.length, 2);
43	
44	    // Update (should bump updatedAt and place first)
45	    final updatedA = await repo.updateNote(a.copyWith(title: 'A1'));
46	    expect(updatedA.title, 'A1');
47	
48	    final list2 = await repo.listNotes();
49	    expect(list2.first.id, updatedA.id);
50	
51	    // Delete
52	    await repo.deleteNote(b.id);
53	    final list3 = await repo.listNotes();
54	    expect(list3.length, 1);
55	    expect(list3.first.id, updatedA.id);
56	  });
57	}
