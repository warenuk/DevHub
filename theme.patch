diff --git a/lib/core/theme/app_palette.dart b/lib/core/theme/app_palette.dart
new file mode 100644
--- /dev/null
+++ b/lib/core/theme/app_palette.dart
@@ -0,0 +1,18 @@
+import 'package:flutter/material.dart';
+
+/// Centralized palette to match the provided dashboard mock.
+/// Dark graphite surfaces + neon-lime accent.
+class AppPalette {
+  // Accent
+  static const Color accent = Color(0xFFA8FF60); // lime / neon green
+
+  // Neutrals
+  static const Color background = Color(0xFF0F1115);
+  static const Color surface    = Color(0xFF151A20);
+  static const Color surface2   = Color(0xFF1B212A);
+  static const Color outline    = Color(0xFF303744);
+
+  // Text
+  static const Color textPrimary   = Color(0xFFE8EAF2);
+  static const Color textSecondary = Color(0xFFB8C0CC);
+}
diff --git a/lib/core/theme/devhub_theme_extension.dart b/lib/core/theme/devhub_theme_extension.dart
new file mode 100644
--- /dev/null
+++ b/lib/core/theme/devhub_theme_extension.dart
@@ -0,0 +1,33 @@
+import 'package:flutter/material.dart';
+
+@immutable
+class DevHubTheme extends ThemeExtension<DevHubTheme> {
+  final Color glow;
+  final Color graphLine;
+  final Color graphFill;
+
+  const DevHubTheme({
+    required this.glow,
+    required this.graphLine,
+    required this.graphFill,
+  });
+
+  @override
+  DevHubTheme copyWith({Color? glow, Color? graphLine, Color? graphFill}) {
+    return DevHubTheme(
+      glow: glow ?? this.glow,
+      graphLine: graphLine ?? this.graphLine,
+      graphFill: graphFill ?? this.graphFill,
+    );
+  }
+
+  @override
+  DevHubTheme lerp(ThemeExtension<DevHubTheme>? other, double t) {
+    if (other is! DevHubTheme) return this;
+    return DevHubTheme(
+      glow: Color.lerp(glow, other.glow, t)!,
+      graphLine: Color.lerp(graphLine, other.graphLine, t)!,
+      graphFill: Color.lerp(graphFill, other.graphFill, t)!,
+    );
+  }
+}
diff --git a/lib/core/theme/app_theme.dart b/lib/core/theme/app_theme.dart
--- a/lib/core/theme/app_theme.dart
+++ b/lib/core/theme/app_theme.dart
@@ -1,51 +1,132 @@
-import 'package:flutter/material.dart';
-
-class AppTheme {
-  static ThemeData lightTheme(ColorScheme? dynamicColorScheme) {
-    final colorScheme = dynamicColorScheme ??
-        ColorScheme.fromSeed(seedColor: const Color(0xFF6750A4));
-
-    return ThemeData(
-      useMaterial3: true,
-      colorScheme: colorScheme,
-      appBarTheme: AppBarTheme(
-        centerTitle: true,
-        backgroundColor: colorScheme.surface,
-        foregroundColor: colorScheme.onSurface,
-        elevation: 0,
-      ),
-      cardTheme: CardThemeData(
-        elevation: 2,
-        shape: RoundedRectangleBorder(
-          borderRadius: BorderRadius.circular(16),
-        ),
-      ),
-      elevatedButtonTheme: ElevatedButtonThemeData(
-        style: ElevatedButton.styleFrom(
-          padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
-          shape: RoundedRectangleBorder(
-            borderRadius: BorderRadius.circular(12),
-          ),
-        ),
-      ),
-      textTheme: const TextTheme(
-        bodyLarge: TextStyle(fontSize: 16),
-        headlineMedium: TextStyle(fontSize: 28, fontWeight: FontWeight.w600),
-        displayLarge: TextStyle(fontSize: 57, fontWeight: FontWeight.bold),
-      ),
-    );
-  }
-
-  static ThemeData darkTheme(ColorScheme? dynamicColorScheme) {
-    final colorScheme = dynamicColorScheme ??
-        ColorScheme.fromSeed(
-          seedColor: const Color(0xFF6750A4),
-          brightness: Brightness.dark,
-        );
-    return ThemeData(
-      useMaterial3: true,
-      colorScheme: colorScheme,
-    );
-  }
-}
+import 'package:flutter/material.dart';
+import 'package:devhub_gpt/core/theme/app_palette.dart';
+import 'package:devhub_gpt/core/theme/devhub_theme_extension.dart';
+
+class AppTheme {
+  static ThemeData lightTheme(ColorScheme? _) {
+    final base = ColorScheme.fromSeed(
+      seedColor: AppPalette.accent,
+      brightness: Brightness.light,
+    );
+    return _themeFrom(base, isDark: false);
+  }
+
+  static ThemeData darkTheme(ColorScheme? _) {
+    final base = ColorScheme.fromSeed(
+      seedColor: AppPalette.accent,
+      brightness: Brightness.dark,
+    );
+    return _themeFrom(base, isDark: true);
+  }
+
+  static ThemeData _themeFrom(ColorScheme base, {required bool isDark}) {
+    final scheme = base.copyWith(
+      surface: AppPalette.surface,
+      surfaceContainerHighest: AppPalette.surface2,
+      background: AppPalette.background,
+    );
+
+    final textTheme = Typography.englishLike2021.apply(
+      bodyColor: AppPalette.textPrimary,
+      displayColor: AppPalette.textPrimary,
+    );
+
+    return ThemeData(
+      useMaterial3: true,
+      colorScheme: scheme,
+      scaffoldBackgroundColor: AppPalette.background,
+      textTheme: textTheme.copyWith(
+        headlineSmall: const TextStyle(
+          fontWeight: FontWeight.w600,
+          letterSpacing: 0.2,
+        ),
+        titleMedium: const TextStyle(
+          color: AppPalette.textSecondary,
+          letterSpacing: .2,
+        ),
+      ),
+      appBarTheme: const AppBarTheme(
+        backgroundColor: Colors.transparent,
+        foregroundColor: AppPalette.textPrimary,
+        elevation: 0,
+        centerTitle: true,
+      ),
+      cardTheme: CardTheme(
+        color: AppPalette.surface,
+        elevation: 0,
+        shape: RoundedRectangleBorder(
+          borderRadius: BorderRadius.circular(16),
+          side: const BorderSide(color: AppPalette.outline, width: 1),
+        ),
+        margin: EdgeInsets.zero,
+      ),
+      dividerTheme:
+          const DividerThemeData(color: AppPalette.outline, thickness: 1),
+      listTileTheme: const ListTileThemeData(
+        iconColor: AppPalette.textSecondary,
+        textColor: AppPalette.textPrimary,
+        dense: true,
+      ),
+      inputDecorationTheme: const InputDecorationTheme(
+        filled: true,
+        fillColor: AppPalette.surface2,
+        border: OutlineInputBorder(
+          borderRadius: BorderRadius.all(Radius.circular(12)),
+          borderSide: BorderSide(color: AppPalette.outline),
+        ),
+        enabledBorder: OutlineInputBorder(
+          borderRadius: BorderRadius.all(Radius.circular(12)),
+          borderSide: BorderSide(color: AppPalette.outline),
+        ),
+        focusedBorder: OutlineInputBorder(
+          borderRadius: BorderRadius.all(Radius.circular(12)),
+          borderSide: BorderSide(color: AppPalette.accent, width: 1.5),
+        ),
+        labelStyle: TextStyle(color: AppPalette.textSecondary),
+      ),
+      elevatedButtonTheme: ElevatedButtonThemeData(
+        style: ElevatedButton.styleFrom(
+          foregroundColor: Colors.black,
+          backgroundColor: AppPalette.accent,
+          padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
+          shape: RoundedRectangleBorder(
+            borderRadius: BorderRadius.circular(12),
+          ),
+        ),
+      ),
+      outlinedButtonTheme: OutlinedButtonThemeData(
+        style: OutlinedButton.styleFrom(
+          foregroundColor: AppPalette.textPrimary,
+          side: const BorderSide(color: AppPalette.outline),
+          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
+          shape: RoundedRectangleBorder(
+            borderRadius: BorderRadius.circular(12),
+          ),
+        ),
+      ),
+      iconTheme: const IconThemeData(color: AppPalette.textSecondary),
+      navigationRailTheme: NavigationRailThemeData(
+        backgroundColor: AppPalette.surface,
+        indicatorColor: AppPalette.accent.withOpacity(.15),
+        indicatorShape: RoundedRectangleBorder(
+          borderRadius: BorderRadius.circular(12),
+          side: const BorderSide(color: AppPalette.accent, width: 1),
+        ),
+        selectedIconTheme: const IconThemeData(color: AppPalette.accent),
+        unselectedIconTheme:
+            const IconThemeData(color: AppPalette.textSecondary),
+        selectedLabelTextStyle: const TextStyle(
+          color: AppPalette.accent,
+          fontWeight: FontWeight.w600,
+        ),
+        unselectedLabelTextStyle:
+            const TextStyle(color: AppPalette.textSecondary),
+      ),
+      extensions: const [
+        DevHubTheme(
+          glow: Color(0x3342FF00),
+          graphLine: AppPalette.accent,
+          graphFill: Color(0x1AA8FF60),
+        ),
+      ],
+    );
+  }
+}
diff --git a/lib/features/shell/presentation/widgets/app_side_nav.dart b/lib/features/shell/presentation/widgets/app_side_nav.dart
new file mode 100644
--- /dev/null
+++ b/lib/features/shell/presentation/widgets/app_side_nav.dart
@@ -0,0 +1,41 @@
+import 'package:flutter/material.dart';
+import 'package:go_router/go_router.dart';
+
+class AppSideNav extends StatelessWidget {
+  const AppSideNav({super.key});
+
+  @override
+  Widget build(BuildContext context) {
+    final String location = GoRouter.of(context).location;
+    final items = <_NavItem>[
+      _NavItem('/dashboard', Icons.space_dashboard_outlined, 'Dashboard'),
+      _NavItem('/github/repos', Icons.book_outlined, 'Projects'),
+      _NavItem('/commits', Icons.commit, 'Commits'),
+      _NavItem('/notes', Icons.note_outlined, 'Notes'),
+      _NavItem('/settings', Icons.settings_outlined, 'Settings'),
+    ];
+    final int index = items.indexWhere((e) => location.startsWith(e.path));
+    final bool extended = MediaQuery.of(context).size.width > 1200;
+
+    return NavigationRail(
+      extended: extended,
+      selectedIndex: index < 0 ? 0 : index,
+      onDestinationSelected: (i) => context.go(items[i].path),
+      destinations: [
+        for (final e in items)
+          NavigationRailDestination(
+            icon: Icon(e.icon),
+            selectedIcon: Icon(e.icon),
+            label: Text(e.label),
+          ),
+      ],
+    );
+  }
+}
+
+class _NavItem {
+  final String path;
+  final IconData icon;
+  final String label;
+  const _NavItem(this.path, this.icon, this.label);
+}
diff --git a/lib/features/shell/presentation/main_shell.dart b/lib/features/shell/presentation/main_shell.dart
--- a/lib/features/shell/presentation/main_shell.dart
+++ b/lib/features/shell/presentation/main_shell.dart
@@ -1,14 +1,24 @@
-import 'package:flutter/material.dart';
-
-class MainShell extends StatelessWidget {
-  const MainShell({super.key, required this.child});
-  final Widget child;
-
-  @override
-  Widget build(BuildContext context) {
-    return Scaffold(
-      appBar: AppBar(title: const Text('DevHub')),
-      body: child,
-    );
-  }
-}
+import 'package:devhub_gpt/features/shell/presentation/widgets/app_side_nav.dart';
+import 'package:flutter/material.dart';
+
+class MainShell extends StatelessWidget {
+  const MainShell({super.key, required this.child});
+  final Widget child;
+
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+      appBar: AppBar(title: const Text('DevHub')),
+      body: Row(
+        children: [
+          const SizedBox(width: 4),
+          const AppSideNav(),
+          const VerticalDivider(width: 1),
+          Expanded(
+            child: Padding(
+              padding: const EdgeInsets.all(16),
+              child: child,
+            ),
+          ),
+        ],
+      ),
+    );
+  }
+}